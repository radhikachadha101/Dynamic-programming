//Top Down approach
class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        //top down approach
        int r=grid.size();
        int c=grid[0].size();
        vector<vector<vector<int>>> dp(r,vector<vector<int>>(c,vector<int>(c,-1)));

        return solve(grid,0,0,c-1,dp);
    }

    int solve(vector<vector<int>>& grid,int r,int c1,int c2,vector<vector<vector<int>>>& dp){
        if(r>=grid.size() || c1<0 || c1>=grid[0].size() || c2<0 || c2>=grid[0].size())
        return 0;
        if(dp[r][c1][c2]!=-1) return dp[r][c1][c2];
      int maxi=-1e9;
       for(int i=-1;i<=1;i++){
           for(int j=-1;j<=1;j++){
             maxi=max(maxi,solve(grid,r+1,c1+i,c2+j,dp));
           }
       }
       return dp[r][c1][c2]=maxi + grid[r][c1] + (c1==c2 ? 0 : grid[r][c2]);

    }
};



---------------------------------------------------------------------------------------------------------------------------------------------------------------
//Bottom Up approach
class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        //Bottom-up approach
        int r=grid.size();
        int c=grid[0].size();
        vector<vector<vector<int>>> dp(r,vector<vector<int>>(c,vector<int>(c,-1)));

           for(int c1=0;c1<c;c1++){
               for(int c2=0;c2<c;c2++){
                   if(c1==c2)
                   dp[r-1][c1][c2]=grid[r-1][c1];
                   else
                   dp[r-1][c1][c2]=grid[r-1][c1]+grid[r-1][c2];
               }
           }

           for(int row=r-2;row>=0;row--){
               for(int c1=0;c1<c;c1++){
                   for(int c2=0;c2<c;c2++){
                       int maxi=-1e8;
                       for(int i=-1;i<=+1;i++){
                           for(int j=-1;j<=+1;j++){
                               int value=0;
                               if(c1==c2)
                               value=grid[row][c1];
                               else
                               value=grid[row][c1]+grid[row][c2];
                               if(c1+i>=0 && c1+i<c && c2+j>=0 && c2+j<c){
                                   value+=dp[row+1][c1+i][c2+j];
                               }
                               else{
                                   value +=-1e8;
                               }
                               maxi=max(maxi,value);
                           }
                       }
                       dp[row][c1][c2]=maxi;
                   }
               }
           }

           return dp[0][0][c-1];

    }

};

